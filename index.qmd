---
title: "**Calidad de aire**"
lang: es
layout: full
mainfont: "Roboto Sans Serif"
format: 
  dashboard:
    orientation: columns
    theme: 
      light: cosmo
css: estilo.css
filters:
  - shinylive
execute: 
  message: false
  warning: false
editor_options: 
  chunk_output_type: console
---

# Presentación {orientation="rows"}

```{r}
#| include: false
library(tidyverse)
library(openair)
library(openxlsx)
library(zoo)
library(ggthemes)
library(ggforce)
library(patchwork)
library(ggrepel)
library(openairmaps)
library(leaflet)
library(leaflet.extras)
library(plotly)
library(highcharter)
library(magick)
source("Scripts/ECA.R")

# Cargando datos del punto de hipólito unanue:
df <- ECA(meteo = "input/CR1000_JULIO_2024.csv",
          gases = "input/eca_2024_julio.csv",
          pm = "input/pm_junio.csv",
          fecha_inicio = "2024-06-21",
          fecha_fin = "2024-06-30",
          estacion = "Unanue",
          tipo = "lista")

df1 <- ECA(meteo = "input/CR1000_JULIO_2024.csv",
           gases = "input/eca_2024_julio.csv",
           pm = "input/1405A227561402_2024-08-01_09-11-26.csv",
           fecha_inicio = "2024-07-17",
           fecha_fin = "2024-07-31",
           estacion = "Vigil",
           tipo = "lista")

df2 <- ECA(meteo = "input/CR1000_AGOSTO_2024.csv",
           gases = "input/gases_odria_agosto.csv",
           pm = "input/pm_agosto_odria.csv",
           fecha_inicio = "2024-08-08",
           fecha_fin = "2024-08-18",
           estacion = "Odría",
           tipo = "lista")

source("Scripts/ECA_mejorado.R")
df3 <- ECA(meteo = "input/CR1000_AGOSTO_UNJBG_2024.csv",
           gases = "input/GASES_AGOSTO_EPSG-UNJBG_2024.csv",
           pm = "input/pm_agosto_epsg_unjbg.csv",
           fecha_inicio = "2024-08-23",
           fecha_fin = "2024-08-31",
           estacion = "epsg_unjbg",
           tipo = "lista")

df4 <- ECA(meteo = "input/CR1000_SETIEMBRE_JCHAVEZ_2024.csv",
          gases = "input/GASES_SETIEMBRE_JCHAVEZ_2024.csv",
          pm = "input/jorge_chavez_pm_emca05.csv",
          fecha_inicio = "2024-09-12",
          fecha_fin = "2024-09-24",
          estacion = "JCHAVEZ",
          tipo = "lista")

df5 <- ECA(meteo = "input/CR1000_OCTUBRE_2024.csv",
          gases = "input/gases_unjbg_octubre.csv",
          pm = "input/pm_octubre_unjbg.csv",
          fecha_inicio = "2024-09-27",
          fecha_fin = "2024-10-08",
          estacion = "unjbg2",
          tipo = "lista")

dfm <- df$df %>% mutate(lat = -18.004275, lon = -70.257304,
                        estacion = "EMCA - 01",
                        XD = "Prolongación Hipólito Unanue")

dfm1 <- df1$df %>% mutate(lat = -17.993250, lon = -70.243305,
                        estacion = "EMCA - 02",
                        XD = "Instituto Vigil")

dfm2 <- df2$df %>% mutate(lat = -17.980364, lon = -70.239032,
                        estacion = "EMCA - 03",
                        XD = "I.E. Manuel A. Odría")

dfm3 <- df3$df %>% mutate(lat = -18.00676, lon = -70.23816,
                        estacion = "EMCA - 04",
                        XD = "Escuela de Posgrado UNJBG")

dfm4 <- df4$df %>% mutate(lat = -18.03961, lon = -70.25581,
                        estacion = "EMCA - 05",
                        XD = "I.E. Jorge Chávez")

dfm5 <- df5$df %>% mutate(lat = -18.02685, lon = -70.2507,
                        estacion = "EMCA - 06",
                        XD = "Universidad Nacional Jorge Basadre Grohmann")

dfm <- rbind(dfm, dfm1, dfm2, dfm3, dfm4, dfm5)
dfm$co <- NULL
dfm <- dfm %>% mutate(co = co_1) %>% select(-co_1)

```

## Quarto {orientation="Columns"}

```{r}
#| component: valuebox
#| title: Horas de monitoreo
list(
  icon = "pencil-square",
  color = "primary",
  value = length(unique(dfm$estacion))
)
```

```{r}
#| component: valuebox
#| title: Horas de monitoreo

list(
  icon = "stopwatch",
  color = "secondary",
  value = length(dfm$date)
)
```

```{r}
#| component: valuebox
#| title: Días monitoreados

list(
  icon = "stopwatch-fill",
  color = "light",
  value = length(dfm$date)/24
)
```

## Quarto {orientation="Columns"}

```{r}
# Instala y carga el paquete gt si no lo tienes
# install.packages("gt")
library(gt)

# Datos de la tabla
data <- data.frame(
  Categoria = c("Buena", "Moderada", "Insalubre para grupos sensibles", 
                "Insalubre", "Muy Insalubre", "Peligrosa"),
  Rango_AQI = c("0 a 50", "51 a 100", "101 a 150", "151 a 200", 
                "201 a 300", "301 a 500"),
  Color = c("Verde", "Amarillo", "Naranja", "Rojo", "Púrpura", "Marrón"),
  Significado = c("La calidad del aire se considera satisfactoria y la contaminación atmosférica presenta un riesgo escaso o nulo.",
                  "La calidad del aire es aceptable pero para algunos contaminantes podría existir una preocupación moderada para la salud de un grupo muy pequeño de personas excepcionalmente sensibles a la contaminación ambiental.",
                  "Los miembros de grupos sensibles pueden padecer efectos en la salud. Probablemente no afectará a las personas en general.",
                  "Todos pueden comenzar a padecer efectos en la salud y los miembros de grupos sensibles pueden padecer efectos más graves.",
                  "Advertencias sanitarias de condiciones de emergencia. Son mayores las probabilidades de que toda la población esté afectada.",
                  "Alerta sanitaria: todos pueden padecer efectos sanitarios más graves."))

# Crear la tabla con gt
data %>%
  gt() %>%
  tab_header(
    title = "Índice de Calidad de Aire"
  ) %>%
  cols_label(
    Categoria = "Categoría",
    Rango_AQI = "Rango AQI",
    Color = "Color",
    Significado = "Significado"
  ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(12), align = "center", v_align = "middle")  # Negrita, tamaño y centrado
    ),
    locations = cells_column_labels(c(Categoria, Rango_AQI, Color, Significado))  # Especifica las columnas
  ) %>%
  tab_style(style = list(cell_fill(color = rgb(158, 255, 145, maxColorValue = 255)),
                         cell_text(color = "black", size = px(10))  # Tamaño de letra ajustado
    ),
    locations = cells_body(
      columns = everything(),
      rows = Categoria == "Buena"
    )
  ) %>%
  tab_style(
    style = list(
      cell_fill(color = rgb(255, 201, 5, maxColorValue = 255)),
      cell_text(color = "black", size = px(10))  # Tamaño de letra ajustado
    ),
    locations = cells_body(
      columns = everything(),
      rows = Categoria == "Moderada"
    )
  ) %>%
  tab_style(
    style = list(
      cell_fill(color = rgb(255, 130, 5, maxColorValue = 255)),
      cell_text(color = "black", size = px(10))  # Tamaño de letra ajustado
    ),
    locations = cells_body(
      columns = everything(),
      rows = Categoria == "Insalubre para grupos sensibles"
    )
  ) %>%
  tab_style(
    style = list(
      cell_fill(color = rgb(240, 34, 0, maxColorValue = 255)),
      cell_text(color = "black", size = px(10))  # Tamaño de letra ajustado
    ),
    locations = cells_body(
      columns = everything(),
      rows = Categoria == "Insalubre"
    )
  ) %>%
  tab_style(
    style = list(
      cell_fill(color = rgb(137, 9, 151, maxColorValue = 255)),
      cell_text(color = "white", size = px(10))  # Tamaño de letra ajustado
    ),
    locations = cells_body(
      columns = everything(),
      rows = Categoria == "Muy Insalubre"
    )
  ) %>%
  tab_style(
    style = list(
      cell_fill(color =rgb(100, 0, 21, maxColorValue = 255)),
      cell_text(color = "white", size = px(10))  # Tamaño de letra ajustado
    ),
    locations = cells_body(
      columns = everything(),
      rows = Categoria == "Peligrosa"
    )
  ) %>% tab_footnote("Esta tabla sirve para saber que Calidad de Aire tiene tu distrito. Lo mismo se ve en el mapa.")
```

```{r}
source("Scripts/AQI.R")
aqqi <- function(db){
  aqi_index(db) %>%
    group_by(fecha) %>% 
    summarize(ind = max(aqi_ind)) %>%
    summarize(ind = max(ind)) %>% pull()
}

placexd <- data.frame(AQI = c(
  aqqi(df$eca), aqqi(df1$eca),
  aqqi(df2$eca), aqqi(df3$eca),
  aqqi(df4$eca), aqqi(df5$eca)),
  estación = paste0("EMCA-0", seq(1:6)),
  lat = c(-18.004275, -17.993250, -17.980364, -18.00676,
          -18.03961, -18.02685),
  lon = c(-70.257304, -70.243305, -70.239032, -70.23816,
          -70.25581, -70.2507),
  lugar = c("Prolongación Hipólito Unanue 1269",
            "IESTP Francisco de Paula Gonzales Vigil",
            "I.E. Manuel A. Odría",
            "Escuela de Posgrado UNJBG",
            "I.E. Jorge Chávez",
            "Universidad Nacional Jorge Basadre Grohmann"))


create_icon <- function(valor) {
  # Crear una imagen en blanco
  img <- image_blank(width = 50, height = 50, color = "#ffc905") %>%
    # Agregar el texto (el valor numérico)
    image_annotate(text = as.character(valor), size = 20, color = "black", location = "+15+15") 
  return(img)
}

# Crear una lista de íconos para cada valor
placexd$icon <- lapply(placexd$AQI, create_icon)

icon_paths <- sapply(placexd$icon, function(icon) {
  path <- tempfile(fileext = ".png")
  image_write(icon, path = path)
  return(path)
})


leaflet() %>% 
  addProviderTiles(
    providers$OpenStreetMap
  ) %>% 
  addMarkers(data = placexd, lng = ~lon, lat = ~lat,
             icon = ~icons(iconUrl = icon_paths, iconWidth = 35, iconHeight = 35),
             popup = ~paste0(
               "<center><b>",estación,
               "<br/></b><center>", lugar,
               "<br/><b>Latitud:</b> ", lat,
               "<br/><b>Longitud:</b> ", lon,
               "<br/><b>Calidad de Aire:</b> ",  
               "<b><font style='color:rgb(255,201,5)'>MODERADA</font></b>")) %>% 
  addCircleMarkers(data = placexd, lat = ~lat,
                   lng = ~lon,
                   radius = 25,
                   fillColor =  "#ffc905",
                   color = "#ffc905",  # Ajusta la opacidad del relleno aquí
                   fillOpacity = 1, opacity = 1) %>% 
  addControl("<div style='background-color: rgba(255, 255, 255, 0.8); padding: 10px; border-radius: 5px;'>
                   <strong><span style='color: black;'>Calidad de aire:</span></strong><br>
                   <span style='color: rgba(255, 201, 5,1);'>● Moderada</span><br>
                 </div>", 
             position = "bottomright", 
             className = "info-control") %>% 
  addMeasure(primaryLengthUnit = "meters",
             primaryAreaUnit = "sqmeters") %>%  
  addSearchOSM() %>% 
  addFullscreenControl()
```

```{r}
#| title: "REPORTES DE MONITOREO"
library(gt)


data <- data.frame(
  Etiqueta = c("Primer Reporte", "Segundo Reporte", "Tercer Reporte",
               "Cuarto Reporte", "Quinto Reporte", "Sexto Reporte"),
  Distrito = c(
    "Tacna", "Alto de la Alianza", "Ciudad Nueva", "Tacna",
    "Coronel Gregorio Albarracín Lanchipa", "Tacna"
  ),
  # Referencia = c("Prolongación Hipólito Unanue 1269, Ex sede Gore-Tacna",
  #                "IESTP Francisco de Paula Gonzáles Vigil",
  #                "I.E. Manuel A. Odría", "Escuela de Posgrado UNJBG",
  #                "I.E. Jorge Chávez", "Universidad Nacional Jorge Basadre Grohmann"),
  Botón = c("INFORMES TERMINADOS/EMCA-01_o.pdf", "INFORMES TERMINADOS/EMCA-02_o.pdf",
            "INFORMES TERMINADOS/EMCA-03_o.pdf", "INFORMES TERMINADOS/EMCA-04_o.pdf",
            "INFORMES TERMINADOS/EMCA-05_o.pdf", "INFORMES TERMINADOS/EMCA-06_o.pdf")
)

data %>%
  gt() %>%
  cols_label(
    Etiqueta = "Reporte",
    Botón = "Documento",
    Distrito = "Distrito") %>%
  fmt_url(
    columns = 3, as_button = FALSE,label = c(
      "EMCA-01 PDF", "EMCA-02 PDF","EMCA-03 PDF",
      "EMCA-04 PDF","EMCA-05 PDF", "EMCA-06 PDF")) %>%
  tab_caption(caption = "La Siguiente tabla contiene los reportes correspondientes a cada punto de monitoreo evaluado en el año 2024.") %>% 
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(12), align = "center")
    ), locations = cells_body())

```


# **Datos del 2024**

<!-- ##  {.sidebar width="20%"} -->

<!-- ### Presentación -->

<!-- Aquí te presentamos los datos de calidad de aire que viene registrando el Gobierno Regional de Tacna a través de su Estación de Monitoreo de Calidad de Aire. -->

## Mapa web 2 {.tabset width="60%"}

```{r}
#| title: "Rosas de viento"
windroseMap(data = dfm,
            latitude = "lat",
            longitude = "lon",
            paddle = F,
            d.icon = 180, popup = "estacion",
            breaks = c(0,0.2,1.5,3.3,5.4),
            include.lowest = FALSE,
            cols = "viridis",
            provider = c("OpenStreetMap", "Esri.WorldImagery"),
            legend.title = "Velocidad<br>del viento (m/s)",
            control.collapsed = TRUE, legend) %>% 
  addMarkers(data = placexd, lng = ~lon, lat = ~lat,
           popup = ~paste0(
             "<center><b>",estación,
             "<br/></b><center>", lugar,
             "<br/><b>Latitud:</b> ", lat,
             "<br/><b>Longitud:</b> ", lon,
             "<br/><b>Calidad de Aire:</b> ",  
             "<b><font style='color:rgb(255,201,5)'>MODERADA</font></b>")) %>% 
  addMeasure(primaryLengthUnit = "meters",
             primaryAreaUnit = "sqmeters") %>%  
  addSearchOSM() %>% 
  addFullscreenControl()
```

```{r}
#| title: "Gráficos polares"
polarMap(data = dfm,
         pollutant = c("pm10", "pm25", "no2",
                       "o3", "so2", "h2s", "co"),
         latitude = "lat",
         longitude = "lon",
         alpha = 0.85, cols = "jet",
         label = "estacion",
         provider = c("OpenStreetMap", "Esri.WorldImagery"),
         key = T,draw.legend = FALSE,
         control.collapsed = TRUE) %>% 
    addDrawToolbar(
    targetGroup = "drawnItems",  # Agrupar los elementos dibujados
    editOptions = editToolbarOptions(
      selectedPathOptions = selectedPathOptions())) %>% 
  addFullscreenControl()
  
```

## column {.tabset width="70%"}

### EMCA - 01 {.tabset}

#### PM10

```{r}
#| title: "PM10 horario"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, pm10)
    ), 
    type = "line", 
    name = "PM10",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(plotLines = list(
    list(
      color = "red",         
      width = 2,
      value = 100,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 45,
      dashStyle = "Solid",
      label = list(text = "OMS",
                   align = "right",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### PM2.5

```{r}
#| title: "PM2.5 horario"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, pm25)
    ), 
    type = "line", 
    name = "PM2.5",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(plotLines = list(
    list(
      color = "red",         
      width = 2,
      value = 50,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 15,
      dashStyle = "Solid",
      label = list(text = "OMS",
                   align = "right",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### NO2

```{r}
#| title: "NO2 horario"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, no2)
    ), 
    type = "line", 
    name = "NO2",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
   hc_yAxis(min = 0, max = 210,  # Ajusta los límites del eje y
           plotLines = list(
             list(
               color = "red",         
               width = 2,
               value = 200,
               dashStyle = "Solid",
               label = list(text = "ECA",
                            align = "right",
                            x = -10,
                            style = list(color = "red",
                                         fontWeight = "bold"))),
             list(
               color = "darkgreen",         
               width = 2,
               value = 25,
               dashStyle = "Solid",
               label = list(text = "OMS",
                            align = "right",
                            x = -10,
                            style = list(color = "darkgreen",
                                         fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### O3

```{r}
#| title: "O3"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, o3)
    ), 
    type = "line", 
    name = "O3",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(min = 0, max = 120,
           plotLines = list(
             list(
      color = "red",         
      width = 2,
      value = 100,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 100,
      dashStyle = "Dash",
      label = list(text = "OMS",
                   align = "left",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### CO

```{r}
#| title: "CO"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, co)
    ), 
    type = "line", 
    name = "CO",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(min = 0, max = 35200,
           plotLines = list(
             list(
               color = "red",         
      width = 2,
      value = 10000,
      dashStyle = "Solid",
      label = list(text = "ECA (8h)",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
      list(
               color = "red",         
      width = 2,
      value = 30000,
      dashStyle = "Solid",
      label = list(text = "ECA (1h)",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 10000,
      dashStyle = "Dash",
      label = list(text = "OMS (8h)",
                   align = "left",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))),
    list(
      color = "green",         
      width = 2,
      value = 35000,
      dashStyle = "Solid",
      label = list(text = "OMS (1h)",
                   align = "left",
                   x = -10,
                   style = list(color = "green",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### SO2

```{r}
#| title: "SO2"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, so2)
    ), 
    type = "line", 
    name = "SO2",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(min = 0, max = 280,
           plotLines = list(
    list(
      color = "red",         
      width = 2,
      value = 250,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 40,
      dashStyle = "Dash",
      label = list(text = "OMS",
                   align = "right",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### H2S

```{r}
#| title: "H2S"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, h2s)
    ), 
    type = "line", 
    name = "H2S",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(min = 0, max = 180,
           plotLines = list(
    list(
      color = "red",         
      width = 2,
      value = 150,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### Índice de Calidad de Aire

```{r}
source("Scripts/AQI.R")

aqi <- c(Bueno = "#00E400", Moderado = "#FFFF00",
         `No saludable para grupos sensibles` = "#FF7E00",
         xdd = "#FF0000",
         xdd2 = "#8F3F97", xdd3 = "#7E0023")

# param2 <- c(co =  bquote(bold(CO)),
#              no2 =  bquote(bold(NO[2])),
#              o3 = bquote(bold(O[3])),
#              pm10 = bquote(bold(PM[10])),
#              pm25 = bquote(bold(PM[2.5])),
#              so2 = bquote(bold(SO[2])))
param2 <- c(co =  "CO",
            no2 =  "NO2",
            o3 = "O3",
            pm10 = "PM10",
            pm25 = "PM2.5",
            so2 = "SO2")

aqi_index(df$eca) %>%
  ggplot(aes(y = tipo,x = factor(fecha), fill = category)) +
  geom_tile(color = "white", lwd =1)+
  geom_text(aes(label = aqi_ind)) +
  scale_fill_manual(values = aqi) +
  scale_y_discrete(labels = param2) +
  labs(x = "Dias de junio", y = "",
    fill = "Categoría") +
    theme_minimal()+
  theme(legend.position = "bottom",
        plot.title = element_text(hjust = 0.5)) -> aqi1


plotly::ggplotly(aqi1) %>%
  layout(
    legend = list(
      orientation = 'h',
      x = 0.5,
      y = 1.07,
      xanchor = 'center',
      yanchor = 'top'
    )
  )
```

#### Tabla de datos

```{r}
#| title: "Datos diarios (ug/m3)"
library(DT)

n <- df$eca %>% 
  rename_at(
      vars(names(.)),
      ~ c("Fecha", "PM2.5", "PM10", 
          "NO2", "SO2", "H2S",
          "CO(1h)", "CO(8h)", "O3(8h)"))

datatable(
  n, extensions = 'Buttons',
  options = list(
    autowidth = TRUE,
    pageLength = 20,
    dom = 'Bfrtip',
    buttons = list(
      'copy', 'print', 
      list(
        extend = 'collection',
        buttons = c('csv', 'excel', 'pdf'),
        text = 'Download'
      )
    ),
    # Añadiendo estilos CSS
    initComplete = JS("function(settings, json) {",
                      "$(this.api().table().header()).css({'font-size': '0.7rem'});",
                      "$(this.api().rows().nodes()).css({'font-size': '0.7rem'});", # Estilo para el cuerpo
                      "$('.dt-button').css({'padding': '1px 2px'});", # Ajusta el padding como desees
                      "}")
  )
) %>% formatRound(
  columns = colnames(n %>% select(-Fecha)), digits = 2
)
```

### EMCA - 02 {.tabset}

#### PM10

```{r}
#| title: "PM10 horario"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df1$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, pm10)
    ), 
    type = "line", 
    name = "PM10",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(plotLines = list(
    list(
      color = "red",         
      width = 2,
      value = 100,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 45,
      dashStyle = "Dash",
      label = list(text = "OMS",
                   align = "right",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### PM2.5

```{r}
#| title: "PM2.5 horario"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df1$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, pm25)
    ), 
    type = "line", 
    name = "PM2.5",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(plotLines = list(
    list(
      color = "red",         
      width = 2,
      value = 50,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 15,
      dashStyle = "Dashed",
      label = list(text = "OMS",
                   align = "right",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### NO2

```{r}
#| title: "NO2 horario"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df1$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, no2)
    ), 
    type = "line", 
    name = "NO2",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
   hc_yAxis(min = 0, max = 210,  # Ajusta los límites del eje y
           plotLines = list(
             list(
               color = "red",         
               width = 2,
               value = 200,
               dashStyle = "Solid",
               label = list(text = "ECA",
                            align = "right",
                            x = -10,
                            style = list(color = "red",
                                         fontWeight = "bold"))),
             list(
               color = "darkgreen",         
               width = 2,
               value = 25,
               dashStyle = "Dash",
               label = list(text = "OMS",
                            align = "right",
                            x = -10,
                            style = list(color = "darkgreen",
                                         fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### O3

```{r}
#| title: "PM2.5 horario"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df1$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, o3)
    ), 
    type = "line", 
    name = "O3",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(min = 0, max = 120,
           plotLines = list(
             list(
      color = "red",         
      width = 2,
      value = 100,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 100,
      dashStyle = "Dash",
      label = list(text = "OMS",
                   align = "left",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### CO

```{r}
#| title: "CO"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df1$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, co)
    ), 
    type = "line", 
    name = "CO",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(min = 0, max = 35200,
           plotLines = list(
             list(
               color = "red",         
      width = 2,
      value = 10000,
      dashStyle = "Solid",
      label = list(text = "ECA (8h)",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
      list(
               color = "red",         
      width = 2,
      value = 30000,
      dashStyle = "Solid",
      label = list(text = "ECA (1h)",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 10000,
      dashStyle = "Dash",
      label = list(text = "OMS (8h)",
                   align = "left",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))),
    list(
      color = "green",         
      width = 2,
      value = 35000,
      dashStyle = "Solid",
      label = list(text = "OMS (1h)",
                   align = "left",
                   x = -10,
                   style = list(color = "green",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### SO2

```{r}
#| title: "SO2"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df1$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, so2)
    ), 
    type = "line", 
    name = "SO2",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(min = 0, max = 280,
           plotLines = list(
    list(
      color = "red",         
      width = 2,
      value = 250,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 40,
      dashStyle = "Dash",
      label = list(text = "OMS",
                   align = "right",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### H2S

```{r}
#| title: "H2S"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df1$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, h2s)
    ), 
    type = "line", 
    name = "H2S",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(min = 0, max = 180,
           plotLines = list(
    list(
      color = "red",         
      width = 2,
      value = 150,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### Índice de Calidad de Aire

```{r}
aqi_index(df1$eca) %>%
  ggplot(aes(y = tipo,x = factor(fecha), fill = category)) +
  geom_tile(color = "white", lwd =1)+
  geom_text(aes(label = aqi_ind)) +
  scale_fill_manual(values = aqi) +
  scale_y_discrete(labels = param2) +
  labs(x = "Dias de junio", y = "",
    fill = "Categoría") +
    theme_minimal()+
  theme(legend.position = "bottom",
        plot.title = element_text(hjust = 0.5)) -> aqi2

plotly::ggplotly(aqi2) %>%
  layout(
    legend = list(
      orientation = 'h',
      x = 0.5,
      y = 1.07,
      xanchor = 'center',
      yanchor = 'top'
    )
  )
```

#### Tabla de datos

```{r}
#| title: "Datos diarios (ug/m3)"
library(DT)

n1 <- df1$eca %>% 
  rename_at(
      vars(names(.)),
      ~ c("Fecha", "PM2.5", "PM10", 
          "NO2", "SO2", "H2S",
          "CO(1h)", "CO(8h)", "O3(8h)"))

datatable(
  n1, extensions = 'Buttons',
  options = list(
    autowidth = TRUE,
    pageLength = 20,
    dom = 'Bfrtip',
    buttons = list(
      'copy', 'print', 
      list(
        extend = 'collection',
        buttons = c('csv', 'excel', 'pdf'),
        text = 'Download'
      )
    ),
    # Añadiendo estilos CSS
    initComplete = JS("function(settings, json) {",
                      "$(this.api().table().header()).css({'font-size': '0.7rem'});",
                      "$(this.api().rows().nodes()).css({'font-size': '0.7rem'});", # Estilo para el cuerpo
                      "$('.dt-button').css({'padding': '1px 2px'});", # Ajusta el padding como desees
                      "}")
  )
) %>% formatRound(
  columns = colnames(n1 %>% select(-Fecha)), digits = 2
)
```

### EMCA - 03 {.tabset}

#### PM10

```{r}
#| title: "PM10 horario"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df2$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, pm10)
    ), 
    type = "line", 
    name = "PM10",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(plotLines = list(
    list(
      color = "red",         
      width = 2,
      value = 100,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 45,
      dashStyle = "Dash",
      label = list(text = "OMS",
                   align = "right",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### PM2.5

```{r}
#| title: "PM2.5 horario"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df2$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, pm25)
    ), 
    type = "line", 
    name = "PM2.5",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(plotLines = list(
    list(
      color = "red",         
      width = 2,
      value = 50,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 15,
      dashStyle = "Dash",
      label = list(text = "OMS",
                   align = "right",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### NO2

```{r}
#| title: "NO2 horario"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df2$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, no2)
    ), 
    type = "line", 
    name = "NO2",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
   hc_yAxis(min = 0, max = 210,  # Ajusta los límites del eje y
           plotLines = list(
             list(
               color = "red",         
               width = 2,
               value = 200,
               dashStyle = "Solid",
               label = list(text = "ECA",
                            align = "right",
                            x = -10,
                            style = list(color = "red",
                                         fontWeight = "bold"))),
             list(
               color = "darkgreen",         
               width = 2,
               value = 25,
               dashStyle = "Dash",
               label = list(text = "OMS",
                            align = "right",
                            x = -10,
                            style = list(color = "darkgreen",
                                         fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### O3

```{r}
#| title: "o3"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df2$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, o3)
    ), 
    type = "line", 
    name = "O3",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(min = 0, max = 120,
           plotLines = list(
             list(
      color = "red",         
      width = 2,
      value = 100,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 100,
      dashStyle = "Dash",
      label = list(text = "OMS",
                   align = "left",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### CO

```{r}
#| title: "CO"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df2$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, co)
    ), 
    type = "line", 
    name = "CO",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(min = 0, max = 35200,
           plotLines = list(
             list(
               color = "red",         
      width = 2,
      value = 10000,
      dashStyle = "Solid",
      label = list(text = "ECA (8h)",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
      list(
               color = "red",         
      width = 2,
      value = 30000,
      dashStyle = "Solid",
      label = list(text = "ECA (1h)",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 10000,
      dashStyle = "Dash",
      label = list(text = "OMS (8h)",
                   align = "left",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))),
    list(
      color = "green",         
      width = 2,
      value = 35000,
      dashStyle = "Solid",
      label = list(text = "OMS (1h)",
                   align = "left",
                   x = -10,
                   style = list(color = "green",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### SO2

```{r}
#| title: "SO2"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df2$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, so2)
    ), 
    type = "line", 
    name = "SO2",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(min = 0, max = 280,
           plotLines = list(
    list(
      color = "red",         
      width = 2,
      value = 250,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 40,
      dashStyle = "Dash",
      label = list(text = "OMS",
                   align = "right",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### H2S

```{r}
#| title: "H2S"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df2$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, h2s)
    ), 
    type = "line", 
    name = "H2S",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(min = 0, max = 180,
           plotLines = list(
    list(
      color = "red",         
      width = 2,
      value = 150,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### Índice de Calidad de Aire

```{r}

aqi_index(df2$eca) %>%
  ggplot(aes(y = tipo,x = factor(fecha), fill = category)) +
  geom_tile(color = "white", lwd =1)+
  geom_text(aes(label = aqi_ind)) +
  scale_fill_manual(values = aqi) +
  scale_y_discrete(labels = param2) +
  labs(x = "Dias de junio", y = "",
    fill = "Categoría") +
    theme_minimal()+
  theme(legend.position = "bottom",
        plot.title = element_text(hjust = 0.5)) -> aqi3


plotly::ggplotly(aqi3) %>%
  layout(
    legend = list(
      orientation = 'h',
      x = 0.5,
      y = 1.07,
      xanchor = 'center',
      yanchor = 'top'
    )
  )
```

#### Tabla de datos

```{r}
#| title: "Datos diarios (ug/m3)"
library(DT)

n3 <- df2$eca %>% 
  rename_at(
      vars(names(.)),
      ~ c("Fecha", "PM2.5", "PM10", 
          "NO2", "SO2", "H2S",
          "CO(1h)", "CO(8h)", "O3(8h)"))

datatable(
  n3, extensions = 'Buttons',
  options = list(
    autowidth = TRUE,
    pageLength = 20,
    dom = 'Bfrtip',
    buttons = list(
      'copy', 'print', 
      list(
        extend = 'collection',
        buttons = c('csv', 'excel', 'pdf'),
        text = 'Download'
      )
    ),
    # Añadiendo estilos CSS
    initComplete = JS("function(settings, json) {",
                      "$(this.api().table().header()).css({'font-size': '0.7rem'});",
                      "$(this.api().rows().nodes()).css({'font-size': '0.7rem'});", # Estilo para el cuerpo
                      "$('.dt-button').css({'padding': '1px 2px'});", # Ajusta el padding como desees
                      "}")
  )
) %>% formatRound(
  columns = colnames(n3 %>% select(-Fecha)), digits = 2
)
```

### EMCA - 04 {.tabset}

#### PM10

```{r}
#| title: "PM10 horario"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df3$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, pm10)
    ), 
    type = "line", 
    name = "PM10",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(plotLines = list(
    list(
      color = "red",         
      width = 2,
      value = 100,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 45,
      dashStyle = "Dash",
      label = list(text = "OMS",
                   align = "right",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### PM2.5

```{r}
#| title: "PM2.5 horario"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df3$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, pm25)
    ), 
    type = "line", 
    name = "PM2.5",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(plotLines = list(
    list(
      color = "red",         
      width = 2,
      value = 50,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 15,
      dashStyle = "Dash",
      label = list(text = "OMS",
                   align = "right",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### NO2

```{r}
#| title: "NO2 horario"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df3$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, no2)
    ), 
    type = "line", 
    name = "NO2",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
   hc_yAxis(min = 0, max = 210,  # Ajusta los límites del eje y
           plotLines = list(
             list(
               color = "red",         
               width = 2,
               value = 200,
               dashStyle = "Solid",
               label = list(text = "ECA",
                            align = "right",
                            x = -10,
                            style = list(color = "red",
                                         fontWeight = "bold"))),
             list(
               color = "darkgreen",         
               width = 2,
               value = 25,
               dashStyle = "Dash",
               label = list(text = "OMS",
                            align = "right",
                            x = -10,
                            style = list(color = "darkgreen",
                                         fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### O3

```{r}
#| title: "o3"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df3$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, o3)
    ), 
    type = "line", 
    name = "O3",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(min = 0, max = 120,
           plotLines = list(
             list(
      color = "red",         
      width = 2,
      value = 100,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 100,
      dashStyle = "Dash",
      label = list(text = "OMS",
                   align = "left",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### CO

```{r}
#| title: "CO"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df3$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, co)
    ), 
    type = "line", 
    name = "CO",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(min = 0, max = 35200,
           plotLines = list(
             list(
               color = "red",         
      width = 2,
      value = 10000,
      dashStyle = "Solid",
      label = list(text = "ECA (8h)",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
      list(
               color = "red",         
      width = 2,
      value = 30000,
      dashStyle = "Solid",
      label = list(text = "ECA (1h)",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 10000,
      dashStyle = "Dash",
      label = list(text = "OMS (8h)",
                   align = "left",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))),
    list(
      color = "green",         
      width = 2,
      value = 35000,
      dashStyle = "Solid",
      label = list(text = "OMS (1h)",
                   align = "left",
                   x = -10,
                   style = list(color = "green",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### SO2

```{r}
#| title: "SO2"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df3$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, so2)
    ), 
    type = "line", 
    name = "SO2",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(min = 0, max = 280,
           plotLines = list(
    list(
      color = "red",         
      width = 2,
      value = 250,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 40,
      dashStyle = "Dash",
      label = list(text = "OMS",
                   align = "right",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### H2S

```{r}
#| title: "H2S"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df3$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, h2s)
    ), 
    type = "line", 
    name = "H2S",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(min = 0, max = 180,
           plotLines = list(
    list(
      color = "red",         
      width = 2,
      value = 150,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### Índice de Calidad de Aire

```{r}

aqi_index(df3$eca) %>%
  ggplot(aes(y = tipo,x = factor(fecha), fill = category)) +
  geom_tile(color = "white", lwd =1)+
  geom_text(aes(label = aqi_ind)) +
  scale_fill_manual(values = aqi) +
  scale_y_discrete(labels = param2) +
  labs(x = "Dias de junio", y = "",
    fill = "Categoría") +
    theme_minimal()+
  theme(legend.position = "bottom",
        plot.title = element_text(hjust = 0.5)) -> aqi4


plotly::ggplotly(aqi4) %>%
  layout(
    legend = list(
      orientation = 'h',
      x = 0.5,
      y = 1.07,
      xanchor = 'center',
      yanchor = 'top'
    )
  )
```

#### Tabla de datos

```{r}
#| title: "Datos diarios (ug/m3)"
library(DT)

n4 <- df3$eca %>% 
  rename_at(
      vars(names(.)),
      ~ c("Fecha", "PM2.5", "PM10", 
          "NO2", "SO2", "H2S",
          "CO(1h)", "CO(8h)", "O3(8h)"))

datatable(
  n4, extensions = 'Buttons',
  options = list(
    autowidth = TRUE,
    pageLength = 20,
    dom = 'Bfrtip',
    buttons = list(
      'copy', 'print', 
      list(
        extend = 'collection',
        buttons = c('csv', 'excel', 'pdf'),
        text = 'Download'
      )
    ),
    # Añadiendo estilos CSS
    initComplete = JS("function(settings, json) {",
                      "$(this.api().table().header()).css({'font-size': '0.7rem'});",
                      "$(this.api().rows().nodes()).css({'font-size': '0.7rem'});", # Estilo para el cuerpo
                      "$('.dt-button').css({'padding': '1px 2px'});", # Ajusta el padding como desees
                      "}")
  )
) %>% formatRound(
  columns = colnames(n4 %>% select(-Fecha)), digits = 2
)
```

### EMCA - 05 {.tabset}

#### PM10

```{r}
#| title: "PM10 horario"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df4$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, pm10)
    ), 
    type = "line", 
    name = "PM10",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(plotLines = list(
    list(
      color = "red",         
      width = 2,
      value = 100,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 45,
      dashStyle = "Dash",
      label = list(text = "OMS",
                   align = "right",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### PM2.5

```{r}
#| title: "PM2.5 horario"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df4$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, pm25)
    ), 
    type = "line", 
    name = "PM2.5",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(plotLines = list(
    list(
      color = "red",         
      width = 2,
      value = 50,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 15,
      dashStyle = "Dash",
      label = list(text = "OMS",
                   align = "right",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### NO2

```{r}
#| title: "NO2 horario"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df4$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, no2)
    ), 
    type = "line", 
    name = "NO2",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
   hc_yAxis(min = 0, max = 210,  # Ajusta los límites del eje y
           plotLines = list(
             list(
               color = "red",         
               width = 2,
               value = 200,
               dashStyle = "Solid",
               label = list(text = "ECA",
                            align = "right",
                            x = -10,
                            style = list(color = "red",
                                         fontWeight = "bold"))),
             list(
               color = "darkgreen",         
               width = 2,
               value = 25,
               dashStyle = "Dash",
               label = list(text = "OMS",
                            align = "right",
                            x = -10,
                            style = list(color = "darkgreen",
                                         fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### O3

```{r}
#| title: "o3"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df4$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, o3)
    ), 
    type = "line", 
    name = "O3",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(min = 0, max = 120,
           plotLines = list(
             list(
      color = "red",         
      width = 2,
      value = 100,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 100,
      dashStyle = "Dash",
      label = list(text = "OMS",
                   align = "left",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### CO

```{r}
#| title: "CO"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df4$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, co)
    ), 
    type = "line", 
    name = "CO",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(min = 0, max = 35200,
           plotLines = list(
             list(
               color = "red",         
      width = 2,
      value = 10000,
      dashStyle = "Solid",
      label = list(text = "ECA (8h)",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
      list(
               color = "red",         
      width = 2,
      value = 30000,
      dashStyle = "Solid",
      label = list(text = "ECA (1h)",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 10000,
      dashStyle = "Dash",
      label = list(text = "OMS (8h)",
                   align = "left",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))),
    list(
      color = "green",         
      width = 2,
      value = 35000,
      dashStyle = "Solid",
      label = list(text = "OMS (1h)",
                   align = "left",
                   x = -10,
                   style = list(color = "green",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### SO2

```{r}
#| title: "SO2"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df4$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, so2)
    ), 
    type = "line", 
    name = "SO2",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(min = 0, max = 280,
           plotLines = list(
    list(
      color = "red",         
      width = 2,
      value = 250,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 40,
      dashStyle = "Dash",
      label = list(text = "OMS",
                   align = "right",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### H2S

```{r}
#| title: "H2S"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df4$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, h2s)
    ), 
    type = "line", 
    name = "H2S",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(min = 0, max = 180,
           plotLines = list(
    list(
      color = "red",         
      width = 2,
      value = 150,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### Índice de Calidad de Aire

```{r}

aqi_index(df4$eca) %>%
  ggplot(aes(y = tipo,x = factor(fecha), fill = category)) +
  geom_tile(color = "white", lwd =1)+
  geom_text(aes(label = aqi_ind)) +
  scale_fill_manual(values = aqi) +
  scale_y_discrete(labels = param2) +
  labs(x = "Dias de junio", y = "",
    fill = "Categoría") +
    theme_minimal()+
  theme(legend.position = "bottom",
        plot.title = element_text(hjust = 0.5)) -> aqi5


plotly::ggplotly(aqi5) %>%
  layout(
    legend = list(
      orientation = 'h',
      x = 0.5,
      y = 1.07,
      xanchor = 'center',
      yanchor = 'top'
    )
  )
```

#### Tabla de datos

```{r}
#| title: "Datos diarios (ug/m3)"
library(DT)

n5 <- df4$eca %>% 
  rename_at(
      vars(names(.)),
      ~ c("Fecha", "PM2.5", "PM10", 
          "NO2", "SO2", "H2S",
          "CO(1h)", "CO(8h)", "O3(8h)"))

datatable(
  n5, extensions = 'Buttons',
  options = list(
    autowidth = TRUE,
    pageLength = 20,
    dom = 'Bfrtip',
    buttons = list(
      'copy', 'print', 
      list(
        extend = 'collection',
        buttons = c('csv', 'excel', 'pdf'),
        text = 'Download'
      )
    ),
    # Añadiendo estilos CSS
    initComplete = JS("function(settings, json) {",
                      "$(this.api().table().header()).css({'font-size': '0.7rem'});",
                      "$(this.api().rows().nodes()).css({'font-size': '0.7rem'});", # Estilo para el cuerpo
                      "$('.dt-button').css({'padding': '1px 2px'});", # Ajusta el padding como desees
                      "}")
  )
) %>% formatRound(
  columns = colnames(n5 %>% select(-Fecha)), digits = 2
)
```

### EMCA - 06 {.tabset}

#### PM10

```{r}
#| title: "PM10 horario"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df5$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, pm10)
    ), 
    type = "line", 
    name = "PM10",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(plotLines = list(
    list(
      color = "red",         
      width = 2,
      value = 100,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 45,
      dashStyle = "Dash",
      label = list(text = "OMS",
                   align = "right",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### PM2.5

```{r}
#| title: "PM2.5 horario"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df5$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, pm25)
    ), 
    type = "line", 
    name = "PM2.5",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(plotLines = list(
    list(
      color = "red",         
      width = 2,
      value = 50,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 15,
      dashStyle = "Dash",
      label = list(text = "OMS",
                   align = "right",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### NO2

```{r}
#| title: "NO2 horario"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df5$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, no2)
    ), 
    type = "line", 
    name = "NO2",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
   hc_yAxis(min = 0, max = 210,  # Ajusta los límites del eje y
           plotLines = list(
             list(
               color = "red",         
               width = 2,
               value = 200,
               dashStyle = "Solid",
               label = list(text = "ECA",
                            align = "right",
                            x = -10,
                            style = list(color = "red",
                                         fontWeight = "bold"))),
             list(
               color = "darkgreen",         
               width = 2,
               value = 25,
               dashStyle = "Dash",
               label = list(text = "OMS",
                            align = "right",
                            x = -10,
                            style = list(color = "darkgreen",
                                         fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### O3

```{r}
#| title: "o3"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df5$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, o3)
    ), 
    type = "line", 
    name = "O3",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(min = 0, max = 120,
           plotLines = list(
             list(
      color = "red",         
      width = 2,
      value = 100,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 100,
      dashStyle = "Dash",
      label = list(text = "OMS",
                   align = "left",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### CO

```{r}
#| title: "CO"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df5$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, co)
    ), 
    type = "line", 
    name = "CO",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(min = 0, max = 35200,
           plotLines = list(
             list(
               color = "red",         
      width = 2,
      value = 10000,
      dashStyle = "Solid",
      label = list(text = "ECA (8h)",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
      list(
               color = "red",         
      width = 2,
      value = 30000,
      dashStyle = "Solid",
      label = list(text = "ECA (1h)",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 10000,
      dashStyle = "Dash",
      label = list(text = "OMS (8h)",
                   align = "left",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))),
    list(
      color = "green",         
      width = 2,
      value = 35000,
      dashStyle = "Solid",
      label = list(text = "OMS (1h)",
                   align = "left",
                   x = -10,
                   style = list(color = "green",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### SO2

```{r}
#| title: "SO2"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df5$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, so2)
    ), 
    type = "line", 
    name = "SO2",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(min = 0, max = 280,
           plotLines = list(
    list(
      color = "red",         
      width = 2,
      value = 250,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))),
    list(
      color = "darkgreen",         
      width = 2,
      value = 40,
      dashStyle = "Dash",
      label = list(text = "OMS",
                   align = "right",
                   x = -10,
                   style = list(color = "darkgreen",
                                fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### H2S

```{r}
#| title: "H2S"

highchart() %>%
  hc_chart(zoomType = "x") %>% 
  hc_add_series(
    data = list_parse2(
      df5$df %>% mutate(
        date = as.numeric(date) * 1000) %>% 
        select(date, h2s)
    ), 
    type = "line", 
    name = "H2S",
    color = "#6BAED6"  # Cambia la línea a color celeste
  )  %>%
  hc_xAxis(type = "datetime") %>% 
  hc_yAxis(min = 0, max = 180,
           plotLines = list(
    list(
      color = "red",         
      width = 2,
      value = 150,
      dashStyle = "Solid",
      label = list(text = "ECA",
                   align = "right",
                   x = -10,
                   style = list(color = "red",
                        fontWeight = "bold"))))) %>% 
  hc_exporting(
    enabled = TRUE,
    buttons = list(
      contextButton = list(
        menuItems = c("downloadPNG",
                      "downloadCSV",
                      "downloadXLS",
                      "downloadPDF"))))
```

#### Índice de Calidad de Aire

```{r}

aqi_index(df5$eca) %>%
  ggplot(aes(y = tipo,x = factor(fecha), fill = category)) +
  geom_tile(color = "white", lwd =1)+
  geom_text(aes(label = aqi_ind)) +
  scale_fill_manual(values = aqi) +
  scale_y_discrete(labels = param2) +
  labs(x = "Dias de junio", y = "",
    fill = "Categoría") +
    theme_minimal()+
  theme(legend.position = "bottom",
        plot.title = element_text(hjust = 0.5)) -> aqi6


plotly::ggplotly(aqi6) %>%
  layout(
    legend = list(
      orientation = 'h',
      x = 0.5,
      y = 1.07,
      xanchor = 'center',
      yanchor = 'top'
    )
  )
```

#### Tabla de datos

```{r}
#| title: "Datos diarios (ug/m3)"
library(DT)

n6 <- df5$eca %>% 
  rename_at(
      vars(names(.)),
      ~ c("Fecha", "PM2.5", "PM10", 
          "NO2", "SO2", "H2S",
          "CO(1h)", "CO(8h)", "O3(8h)"))

datatable(
  n6, extensions = 'Buttons',
  options = list(
    autowidth = TRUE,
    pageLength = 20,
    dom = 'Bfrtip',
    buttons = list(
      'copy', 'print', 
      list(
        extend = 'collection',
        buttons = c('csv', 'excel', 'pdf'),
        text = 'Download'
      )
    ),
    # Añadiendo estilos CSS
    initComplete = JS("function(settings, json) {",
                      "$(this.api().table().header()).css({'font-size': '0.7rem'});",
                      "$(this.api().rows().nodes()).css({'font-size': '0.7rem'});", # Estilo para el cuerpo
                      "$('.dt-button').css({'padding': '1px 2px'});", # Ajusta el padding como desees
                      "}")
  )
) %>% formatRound(
  columns = colnames(n6 %>% select(-Fecha)), digits = 2
)
```

# Beta

```{r}
library(gt)

# Datos de la tabla
data <- data.frame(
  Categoria = c("Buena", "Moderada", "Insalubre para grupos sensibles", 
                "Insalubre", "Muy Insalubre", "Peligrosa"),
  Rango_AQI = c("0 a 50", "51 a 100", "101 a 150", "151 a 200", 
                "201 a 300", "301 a 500"),
  Color = c("Verde", "Amarillo", "Naranja", "Rojo", "Púrpura", "Marrón"),
  Significado = c("La calidad del aire se considera satisfactoria y la contaminación atmosférica presenta un riesgo escaso o nulo.",
                  "La calidad del aire es aceptable pero para algunos contaminantes podría existir una preocupación moderada para la salud de un grupo muy pequeño de personas excepcionalmente sensibles a la contaminación ambiental.",
                  "Los miembros de grupos sensibles pueden padecer efectos en la salud. Probablemente no afectará a las personas en general.",
                  "Todos pueden comenzar a padecer efectos en la salud y los miembros de grupos sensibles pueden padecer efectos más graves.",
                  "Advertencias sanitarias de condiciones de emergencia. Son mayores las probabilidades de que toda la población esté afectada.",
                  "Alerta sanitaria: todos pueden padecer efectos sanitarios más graves."))

# Crear la tabla con gt
data %>%
  gt() %>%
  tab_header(
    title = "Índice de Calidad de Aire"
  ) %>%
  cols_label(
    Categoria = "Categoría",
    Rango_AQI = "Rango AQI",
    Color = "Color",
    Significado = "Significado"
  ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(12), align = "center", v_align = "middle")  # Negrita, tamaño y centrado
    ),
    locations = cells_column_labels(c(Categoria, Rango_AQI, Color, Significado))  # Especifica las columnas
  ) %>%
  tab_style(style = list(cell_fill(color = rgb(158, 255, 145, maxColorValue = 255)),
                         cell_text(color = "black", size = px(10))  # Tamaño de letra ajustado
    ),
    locations = cells_body(
      columns = everything(),
      rows = Categoria == "Buena"
    )
  ) %>%
  tab_style(
    style = list(
      cell_fill(color = rgb(255, 201, 5, maxColorValue = 255)),
      cell_text(color = "black", size = px(10))  # Tamaño de letra ajustado
    ),
    locations = cells_body(
      columns = everything(),
      rows = Categoria == "Moderada"
    )
  ) %>%
  tab_style(
    style = list(
      cell_fill(color = rgb(255, 130, 5, maxColorValue = 255)),
      cell_text(color = "black", size = px(10))  # Tamaño de letra ajustado
    ),
    locations = cells_body(
      columns = everything(),
      rows = Categoria == "Insalubre para grupos sensibles"
    )
  ) %>%
  tab_style(
    style = list(
      cell_fill(color = rgb(240, 34, 0, maxColorValue = 255)),
      cell_text(color = "black", size = px(10))  # Tamaño de letra ajustado
    ),
    locations = cells_body(
      columns = everything(),
      rows = Categoria == "Insalubre"
    )
  ) %>%
  tab_style(
    style = list(
      cell_fill(color = rgb(137, 9, 151, maxColorValue = 255)),
      cell_text(color = "white", size = px(10))  # Tamaño de letra ajustado
    ),
    locations = cells_body(
      columns = everything(),
      rows = Categoria == "Muy Insalubre"
    )
  ) %>%
  tab_style(
    style = list(
      cell_fill(color =rgb(100, 0, 21, maxColorValue = 255)),
      cell_text(color = "white", size = px(10))  # Tamaño de letra ajustado
    ),
    locations = cells_body(
      columns = everything(),
      rows = Categoria == "Peligrosa"
    )
  ) %>% 
  tab_caption(caption = "Una manera muy útil de medir la calidad de aire de diferentes zonas del país era utilizando el Índice de Calidad de Aire
del Perú, sin embargo, este instrumento técnico se encuentra desactualizado respecto a la normativa vigente. Por lo cual
aquí se viene utilizando el Índice de Calidad de Aire (AQI por sus siglas en inglés) de la Agencia de Protección Ambiental
de los Estados Unidos (US-EPA, 2024), cuya simbología se aprecia en la tabla")
```

```{shinylive-python}
#| standalone: true
#| viewerHeight: 700
data = {
    'AQI': [50, 60, 55, 70, 75, 65],
    'estación': [f'EMCA-0{i+1}' for i in range(6)],
    'lat': [-18.004275, -17.993250, -17.980364, -18.00676, -18.03961, -18.02685],
    'lon': [-70.257304, -70.243305, -70.239032, -70.23816, -70.25581, -70.2507],
    'lugar': [
        "Prolongación Hipólito Unanue 1269",
        "IESTP Francisco de Paula Gonzales Vigil",
        "I.E. Manuel A. Odría",
        "Escuela de Posgrado UNJBG",
        "I.E. Jorge Chávez",
        "Universidad Nacional Jorge Basadre Grohmann"
    ]
}

# Inserta tu valor AQI
from shiny import reactive
from shiny.express import input, ui
from shinywidgets import render_widget
import ipyleaflet as ipyl
import pandas as pd

df = pd.DataFrame(data)
df = df.pivot_table(values = ['lat', 'lon'], columns = ["estación"])
df = df.to_dict(orient='list')

ui.input_select("center", "Estaciones", choices=list(df.keys()))

@render_widget
def map():
    return ipyl.Map(zoom=17)

@reactive.effect
def _():
    map.widget.center = df[input.center()]
   
```
